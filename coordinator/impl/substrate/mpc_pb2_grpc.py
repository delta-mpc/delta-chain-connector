# type: ignore
# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import mpc_pb2 as mpc__pb2


class MpcStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.registerNode = channel.unary_stream(
            "/mpc.Mpc/registerNode",
            request_serializer=mpc__pb2.RegisterNodeRequest.SerializeToString,
            response_deserializer=mpc__pb2.EventResponse.FromString,
        )
        self.registerTask = channel.unary_stream(
            "/mpc.Mpc/registerTask",
            request_serializer=mpc__pb2.RegisterTaskRequest.SerializeToString,
            response_deserializer=mpc__pb2.EventResponse.FromString,
        )
        self.joinTask = channel.unary_stream(
            "/mpc.Mpc/joinTask",
            request_serializer=mpc__pb2.JoinTaskRequest.SerializeToString,
            response_deserializer=mpc__pb2.EventResponse.FromString,
        )
        self.train = channel.unary_stream(
            "/mpc.Mpc/train",
            request_serializer=mpc__pb2.TrainRequest.SerializeToString,
            response_deserializer=mpc__pb2.EventResponse.FromString,
        )
        self.key = channel.unary_stream(
            "/mpc.Mpc/key",
            request_serializer=mpc__pb2.KeyRequest.SerializeToString,
            response_deserializer=mpc__pb2.EventResponse.FromString,
        )
        self.event = channel.unary_stream(
            "/mpc.Mpc/event",
            request_serializer=mpc__pb2.EventRequest.SerializeToString,
            response_deserializer=mpc__pb2.EventResponse.FromString,
        )


class MpcServicer(object):
    """Missing associated documentation comment in .proto file."""

    def registerNode(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def registerTask(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def joinTask(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def train(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def key(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def event(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_MpcServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "registerNode": grpc.unary_stream_rpc_method_handler(
            servicer.registerNode,
            request_deserializer=mpc__pb2.RegisterNodeRequest.FromString,
            response_serializer=mpc__pb2.EventResponse.SerializeToString,
        ),
        "registerTask": grpc.unary_stream_rpc_method_handler(
            servicer.registerTask,
            request_deserializer=mpc__pb2.RegisterTaskRequest.FromString,
            response_serializer=mpc__pb2.EventResponse.SerializeToString,
        ),
        "joinTask": grpc.unary_stream_rpc_method_handler(
            servicer.joinTask,
            request_deserializer=mpc__pb2.JoinTaskRequest.FromString,
            response_serializer=mpc__pb2.EventResponse.SerializeToString,
        ),
        "train": grpc.unary_stream_rpc_method_handler(
            servicer.train,
            request_deserializer=mpc__pb2.TrainRequest.FromString,
            response_serializer=mpc__pb2.EventResponse.SerializeToString,
        ),
        "key": grpc.unary_stream_rpc_method_handler(
            servicer.key,
            request_deserializer=mpc__pb2.KeyRequest.FromString,
            response_serializer=mpc__pb2.EventResponse.SerializeToString,
        ),
        "event": grpc.unary_stream_rpc_method_handler(
            servicer.event,
            request_deserializer=mpc__pb2.EventRequest.FromString,
            response_serializer=mpc__pb2.EventResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "mpc.Mpc", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class Mpc(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def registerNode(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_stream(
            request,
            target,
            "/mpc.Mpc/registerNode",
            mpc__pb2.RegisterNodeRequest.SerializeToString,
            mpc__pb2.EventResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def registerTask(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_stream(
            request,
            target,
            "/mpc.Mpc/registerTask",
            mpc__pb2.RegisterTaskRequest.SerializeToString,
            mpc__pb2.EventResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def joinTask(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_stream(
            request,
            target,
            "/mpc.Mpc/joinTask",
            mpc__pb2.JoinTaskRequest.SerializeToString,
            mpc__pb2.EventResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def train(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_stream(
            request,
            target,
            "/mpc.Mpc/train",
            mpc__pb2.TrainRequest.SerializeToString,
            mpc__pb2.EventResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def key(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_stream(
            request,
            target,
            "/mpc.Mpc/key",
            mpc__pb2.KeyRequest.SerializeToString,
            mpc__pb2.EventResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def event(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_stream(
            request,
            target,
            "/mpc.Mpc/event",
            mpc__pb2.EventRequest.SerializeToString,
            mpc__pb2.EventResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )
